(self.webpackChunkchatsubo=self.webpackChunkchatsubo||[]).push([[367],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(t),m=a,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return t?r.createElement(f,o(o({ref:n},c),{},{components:t})):r.createElement(f,o({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4492:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var r=t(2122),a=t(9756),i=(t(7294),t(3905)),o=["components"],l={},s="Introduction",u={unversionedId:"Providers/index",id:"Providers/index",isDocsHomePage:!1,title:"Introduction",description:"Fonctionnement",source:"@site/docs/20-Providers/00-index.md",sourceDirName:"20-Providers",slug:"/Providers/index",permalink:"/docs/Providers/index",editUrl:"https://github.com/chatsuboctf/chatsubo/docs/20-Providers/00-index.md",version:"current",sidebarPosition:0,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Quickstart",permalink:"/docs/Introduction/quickstart"},next:{title:"Plugins",permalink:"/docs/Providers/custom"}},c=[{value:"Fonctionnement",id:"fonctionnement",children:[]},{value:"Instances",id:"instances",children:[{value:"Challenges &quot;dynamiques&quot;",id:"challenges-dynamiques",children:[]}]},{value:"Configuration",id:"configuration",children:[]}],p={toc:c};function d(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"introduction"},"Introduction"),(0,i.kt)("h2",{id:"fonctionnement"},"Fonctionnement"),(0,i.kt)("p",null,"Le principe de fonctionnement du backend est le suivant : le serveur re\xe7oit des ordres qu'il transmet aux plugins, qui savent comment l'ex\xe9cuter."),(0,i.kt)("p",null,"Cette architecture vise \xe0 favoriser au maximum l'adaptation de Chatsubo aux diff\xe9rents environnements de virtualisation."),(0,i.kt)("p",null,"Ainsi, les plugins de providers :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Font la traduction entre les donn\xe9es expos\xe9es par l'hyperviseur et celles attendues par la plateforme"),(0,i.kt)("li",{parentName:"ul"},"Savent comment ex\xe9cuter les ordres envoy\xe9s depuis l'interface")),(0,i.kt)("p",null,"Aujourd'hui, la plateforme est compatible avec deux providers : ",(0,i.kt)("strong",{parentName:"p"},"Docker")," et ",(0,i.kt)("strong",{parentName:"p"},"Proxmox"),"."),(0,i.kt)("h2",{id:"instances"},"Instances"),(0,i.kt)("p",null,"Il est n\xe9cessaire de s\xe9parer deux notions :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Le template, qui servira d'image de base \xe0 partir de laquelle l'instance sera d\xe9ploy\xe9e \xe0 la demande du joueur (providers ",(0,i.kt)("em",{parentName:"li"},"dynamique")," uniquement)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Ex : un Dockerfile"))),(0,i.kt)("li",{parentName:"ul"},"L'instance d\xe9ploy\xe9e")),(0,i.kt)("p",null,"Dans le cas des d\xe9fis \"classiques\" (non-dynamiques), comme lors de l'utilisation d'une machine h\xe9berg\xe9e sur un Proxmox, l'instance d\xe9ploy\xe9e sera consid\xe9r\xe9e comme son propre template. Les m\xe9tadonn\xe9es concernant le nom du template, le ",(0,i.kt)("inlineCode",{parentName:"p"},"realm")," et l'adresse IP devront donc \xeatre directement expos\xe9es depuis l'instance. "),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Par exemple, dans le cas d'un challenge h\xe9berg\xe9 sur un Proxmox, ces donn\xe9es seront expos\xe9es via la ",(0,i.kt)("inlineCode",{parentName:"p"},"Note")," de la machine. Elle devra donc contenir \xe0 minima les labels suivants :"),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},"chatsubo.template=xxx"),(0,i.kt)("li",{parentName:"ul"},"chatsubo.realm=yyy"),(0,i.kt)("li",{parentName:"ul"},"chatsubo.address=X.X.X.X"))),(0,i.kt)("h3",{id:"challenges-dynamiques"},'Challenges "dynamiques"'),(0,i.kt)("p",null,"Les challenges ",(0,i.kt)("em",{parentName:"p"},"dynamiques")," offrent la possibilit\xe9 aux joueurs de d\xe9ployer leur propre instance. Ce type de challenge a la particularit\xe9 d'offrir la possibilit\xe9 de g\xe9n\xe9rer certains \xe9l\xe9ments al\xe9atoires au cours de l'instanciation."),(0,i.kt)("p",null,"Par exemple, dans le cas o\xf9 le syst\xe8me de flag dynamique est utilis\xe9, l'instance les g\xe9n\xe8rera au build de l'image."),(0,i.kt)("p",null,"Ces informations doivent \xe9galement \xeatre accessibles depuis Chatsubo pour pouvoir \xeatre r\xe9cup\xe9r\xe9s au moment o\xf9 l'utilisateur soumet sa proposition depuis la plateforme."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Dans le cas des flags dynamiques, cela implique qu'il est imp\xe9ratif que l'instance soit toujours en fonctionnement lors de leur validation.")),(0,i.kt)("p",null,"Pour l'instant, seul Docker supporte ce syst\xe8me gr\xe2ce aux labels, qu'il est possible de manipuler lors du build de l'image et qui sont r\xe9cup\xe9rables via l'API."),(0,i.kt)("p",null,"Cette m\xe9canique peut \xe9galement \xeatre int\xe9ressante pour g\xe9n\xe9rer des identifiants uniques dans le cadre d'un acc\xe8s initial (SSH, telnet, portail web) qui serait mis \xe0 disposition du joueur."),(0,i.kt)("p",null,"Exemple de Dockerfile tirant partie des m\xe9tadonn\xe9es g\xe9n\xe9r\xe9es \xe0 l'instanciation :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'FROM alpine:3.14\n\nRUN apk add nmap-ncat\n\nARG FLAG0\nARG SESSION\n\nLABEL chatsubo.template="hello-flag" \\\n        chatsubo.flags.helloworld.value="$FLAG0" \\\n        chatsubo.flags.helloworld.points="25" \\\n        chatsubo.session="$SESSION"\n\nRUN sleep 3  # Needed to fix Celery not triggering the \'on_success\' event \n\nRUN mkdir /secrets\nRUN echo "$FLAG0" > /secrets/flag\n\nENTRYPOINT ncat -lnkvp 3434 --exec "/bin/cat /secrets/flag"\nCMD /bin/sh%\n')),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"Une fois le plugin cr\xe9\xe9, il suffira de renseigner les informations permettant \xe0 la plateforme de communiquer avec les providers dans le fichier de configuration :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'providers:\n  pve:\n    warzone: # provider name\n      api:\n        user: "api@pam"\n        host: "https://pve.hacklab"\n        port: 8006\n        token:\n         name: "b5215aeb-ae28-432c-b1b7-047276d87cf"\n         value: "dff1ae17-4eb3-4543-a9f2-a703f375c48"\n')))}d.isMDXComponent=!0}}]);